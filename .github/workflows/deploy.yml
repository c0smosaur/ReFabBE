name: Deploy to EC2

on:
  push:
    branches: [ "main", "setting/241101-#4-cicd-파이프라인-구축" ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACTIONS_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ACTIONS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Get allowed IP ranges
      id: ip_ranges
      run: |
        ACTIONS_RUNNER_IP=$(curl -s https://api.github.com/meta | jq -r '.actions[]' | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$' | head -n 1)
        echo "runner_ip=$ACTIONS_RUNNER_IP" >> $GITHUB_OUTPUT

    - name: Add IP to security group
      run: |
        aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr ${{ steps.ip_ranges.outputs.runner_ip }}
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.SSH_KEY }}
        script: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker pull ${{ env.image }}
          docker stop spring-app || true
          docker rm spring-app || true
          docker run -d --name spring-app -p 8080:8080 \
            -e RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }} \
            -e AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} \
            -e AWS_ACCESS_KEY=${{ secrets.S3_AWS_ACCESS_KEY }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.S3_AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            ${{ env.image }}
          docker system prune -f

    - name: Remove IP from security group
      if: always()
      run: |
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr ${{ steps.ip_ranges.outputs.runner_ip }}
    
